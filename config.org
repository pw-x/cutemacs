#+TITLE: My =emacs= configurations.
#+STARTUP: overview

[[file:patchi.png]]

* Configure and turn off some =emacs= defaults.
#+begin_src elisp
  (use-package emacs
    :elpaca nil
    :hook (prog-mode . display-line-numbers-mode)
    :config
    (setq ring-bell-function #'ignore)
    (setq use-short-answers t)
    (setq display-time-day-and-date t)
    (global-visual-line-mode 1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (save-place-mode 1)
    (setq display-line-numbers-type 'relative))

  ;; Suppress the confirmation prompt when killing an unmodified buffer.
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

* Set up fonts.
#+begin_src elisp
  (set-frame-font "SF Mono 11" nil t)

  (custom-theme-set-faces
   'user
   '(fixed-pitch ((t (:family "SF Mono" :height 130))))
   '(variable-pitch ((t (:family "SF Pro" :height 1.2 :weight regular))))
   `(org-quote ((t (:inherit variable-pitch))))
   `(org-block ((t (:height 115 :inherit fixed-pitch))))
   `(org-document-title ((t (:inherit default ,@(x-list-fonts "SF Pro") :height 1.3 :weight bold)))))
#+end_src
* Fix weird =compat= bug
#+begin_src elisp
(use-package compat :elpaca (:host github :repo "emacs-compat/compat"))
#+end_src
* Keep the emacs directory clean.
Change the default user emacs directory to keep unwanted things out of ~~/.emacs.d~.
#+begin_src elisp
(setf user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

Use =no-littering= to automatically set common paths to the new user emacs directory.
#+begin_src elisp
  (use-package no-littering
    :config 
    (setf no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
    (setf no-littering-var-directory (expand-file-name "var/" user-emacs-directory))
    (setf auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
  (elpaca-wait)

  (require 'recentf)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
#+end_src

Place =customize-*= blocks into a separate file
#+begin_src emacs-lisp
  (setf custom-file (no-littering-expand-etc-file-name "custom.el"))
  (add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))
  (load custom-file t t)
#+end_src
* Use the =modus= themes.
#+begin_src elisp
  (use-package modus-themes
    :bind ("<f5>" . #'modus-themes-toggle)
    :config (load-theme 'modus-operandi :no-confirm)
    :init
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-bold-constructs nil)
    (setq modus-themes-prompts '(italic bold))
    (setq modus-themes-variable-pitch-ui nil))
#+end_src
* Some =org-mode= configuration.
#+begin_src elisp
  (use-package org
    :elpaca nil
    :hook (org-mode . variable-pitch-mode)
    :config
    (setq org-startup-with-inline-images t)
    (setq org-hide-emphasis-markers t))
#+end_src
* Set up the modeline
#+begin_src elisp
  (use-package feline
    :config (feline-mode)
    :custom
    (feline-line-prefix "l:")
    (feline-column-prefix "c:")
    (feline-mode-symbols
     '(emacs-lisp-mode "λ" racket-mode "λ")))
#+end_src 
* Use =vertico= for completion in minibuffers.
#+begin_src elisp
  (use-package vertico
    :init (vertico-mode))
  ;; Add comments to the completion options.
  (use-package marginalia
    :init (marginalia-mode))
#+end_src

* Use =lispy= for editing Lisp languages.
#+begin_src elisp
  (use-package lispy
    :hook (emacs-lisp-mode racket-mode))
#+end_src

* Support the =Racket= programming language.
#+begin_src elisp
  (use-package racket-mode
    :hook
    ((racket-mode racket-repl-mode) . prettify-lambda)
    ((racket-mode racket-repl-mode) . company-mode))
#+end_src
* Support the =Rust= programming language
#+begin_src elisp
  (use-package rustic
    :hook (rustic-mode . company-mode)
    :config
    (define-key rustic-cargo-run-mode-map (kbd "C-r") 'rust-compile-send-input)
    (setq rustic-format-on-save t))

  (defun rust-compile-send-input ()
    "Read string from minibuffer and send it to the rust process of the current
  buffer."
    (interactive)
    (let ((input (read-from-minibuffer "Send input to rust process: "))
	  (proc (get-buffer-process (current-buffer)))
	  (inhibit-read-only t))
      (process-send-string proc (concat input "\n"))))

  (use-package lsp-mode
    :custom
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-inlay-hint-enable t))

  (use-package lsp-ui
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))

#+end_src
* Use the =company= completion framework for programming.
#+begin_src elisp
  (use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 4))
#+end_src

* Prettify the lambda symbol for Lisp.
#+begin_src elisp
  (defun prettify-lambda ()
    (progn (setq prettify-symbols-alist
		 '(("lambda" . 955)
		   ("LAMBDA" . 955)
		   ("fn"     . 955)))
	   (prettify-symbols-mode 1)))
#+end_src

* Use =magit= for =git= integration.
#+begin_src elisp
  (use-package magit :after seq
   :config (setq magit-push-always-verify nil))
#+end_src
* Display hex codes as color
#+begin_src elisp
(use-package rainbow-mode :elpaca (:host github :repo "emacsmirror/rainbow-mode"))
#+end_src elisp
* Convenient mode for writing text
#+begin_src elisp
  (use-package olivetti
    :config
    (setf olivetti-style t)
    (olivetti-set-width 120)
    :hook ((org-mode latex-mode text-mode) . olivetti-mode))
#+end_src
* Use =pdf-tools= for reading PDFs.
#+begin_src elisp
  (use-package pdf-tools)
#+end_src
* Use =eat= as a terminal emulator
#+begin_src elisp
  (use-package eat)
#+end_src
* Use =which-key= to get informational popups about keybindings.
#+begin_src elisp
  (use-package which-key)
#+end_src
